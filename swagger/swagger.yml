openapi: 3.0.0
info:
  version: 1.0.0
  title: MSP - Twitter Clone
  description: ''
servers:
- url: http://localhost:6969/
paths:
  /users:
    post:
      summary: Sign up
      description: Create and store a new user with the given data in the database. Also creates and returns a corresponding JWT used for authorization in subsequent requests. JWT
      security:
        - {}
      requestBody:
        description: User information
        required: true
        content:
          application/json:
            schema: 
              allOf:
                - $ref: '#/components/schemas/Authentication'
                - $ref: '#/components/schemas/UserSettings'
      responses:
        '200':
          description: 'User was successfully created. Returns a JWT access token that should be set in the Authorization header of subsequent API calls.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
        '409':
          description: 'A user with the same login already exists. Please provide a different user login.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth:
    post:
      summary: Login 
      description: Authenticate a user by passing in login credentials. Returns a JWT that can be used in the Authorization Header to authenticate the user in subsequent API calls.
      security:
        - {}
      requestBody:
        description: User information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Authentication'
      responses:
        '200':
          description: 'User was successfully authorized. Returns a JWT access token that should be set in the Authorization header of subsequent API calls.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /posts/:
    post:
      summary: New post
      description: Create a new post with the given details.
      requestBody:
        description: User information
        required: true
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/NewPost'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostMeta'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: List posts
      description: Get a paginated list of posts.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostQuery'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: object
                required:
                  - nextPageToken
                  - posts
                properties:
                  nextPageToken:
                    type: string
                    description: Opaque page token used to request subsequent pages. Empty string "" if no more data exists.
                  posts:
                    type: 'array'
                    items:
                      $ref: '#/components/schemas/PostMeta'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /posts/{id}:
    get:
      summary: Get post
      description: Get the post with the given id.
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /posts/{id}/watch:
    get:
      summary: (WS) Watch post
      description: Start watching the specified post. Establishes a Websocket connection that is called whenever information associated with the post is updated.
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'  # TODO: We might want to change this and only send diff or events.
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /posts/{id}/likes:
    post:
      summary: Like/Unlike post
      description: Like the given post.
      parameters:
        - in: path
          name: like
          schema:
            type: boolean
          required: true
          description: If true, the post is liked. If false, the post is unliked.
      responses:
        '200':
          description: ok
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /posts/{id}/comments:
    post:
      summary: New comment
      description: Add a new comment to the given post.
      requestBody:
        description: User information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewComment'

      responses:
        '200':
          description: ok
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/find:
    get:
      summary: Find users
      description: Find users with the given search string. Might return multiple results or non at all.
      parameters:
        - in: path
          name: search
          schema:
            type: string
          required: true
          description: Any search string based on which users are returned
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{id}:
    get:
      summary: Get user
      description: Get the UserSettings of the user with the given id. Use magic id 'me' to get the user associated with the provided JWT token, i.e. the logged in user.
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: 'No user with the given id was found.'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{id}/follow:
    post:
      summary: Follow/Unfollow
      description: Follow or unfollow the specified user.
      parameters:
        - in: path
          name: follow
          schema:
            type: boolean
          required: true
          description: If true, the user is followed. If false, the user is unfollowed.
      responses:
        '200':
          description: ok
        '404':
          description: 'No user with the given id was found.'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  securitySchemes:
    JWT:
      type: http
      scheme: bearer
      bearerFormat: JWT 
      description: 'Authorization: Bearer <token>'
  schemas:
    Authentication:
      type: object
      required:
      - username
      - password
      properties:
        username:
          type: string
          description: A unique login name.
        password:
          type: string
          description: The password of the user.
    AccessToken:
      type: object
      required:
      - accessToken
      - tokenType
      properties:
        accessToken:
          type: string
          description: The access token to be used in the Authorization Header of subsequent calls.
        tokenType:
          type: string
          description: Type of the token, typically 'Bearer'.
    UserSettings:
      type: object
      required:
      - iconId
      properties:
        iconId:
          type: string
          description: Identifies the locally stored icon assigned to the given user.
        displayName:
          type: string
          description: The name that is displayed publically inside the app.
    User:
      type: object
      allOf:
        - $ref: '#/components/schemas/UserSettings'
      required:
      - id
      properties:
        id:
          type: string
          description: Unique identifier of the user
        followers:
          type: integer
          description: Number of followers  # Is number of followers enough, or do we want to display the actual followers?
    NewPost:
      type: object
      required:
      - content
      properties:
        content:
          type: string
          description: The content of the post provided by the user
        isAI:
          type: boolean
          description: If true, the server uses the AI feature.
        autogenerateAnswers:
          type: boolean
          description: If true, the server will automatically generate comments on the post.
        mood:
          type: string
          description: The mood of the post. Valid values = ['happy','sad','angry','ironic']. If no value is provided, mood feature is not used.
        temperature:
          type: number
          description: The temperature, i.e. craziness of the post.
        # TODO: add additional needed parameters
    PostQuery:
      type: object
      properties:
        userIds:
          type: array
          description: Specify userIds to only retrieve posts from these users. User magic 'me' as own userId. If no userIds are specified, all posts are returned by the server.
          items:
            type: string
        isUserFeed:
          type: boolean
          description: If true, only posts from followed users are returned. 
        pageSize:
          type: integer
          description: The maximum number of results returned by the server. If no value is given, a default is used. The server may further constraint the page size.
        pageToken:
          type: string
          description: Specifies which page to return. If not set or pageToken = "" the first page is returned. Use the 'nextPageToken' returned by previous request to get subsequent pages.
    PostMeta:
      type: object
      required:
      - id
      - user
      - content
      - timestamp
      - likes
      - commentCount
      properties:
        id: 
          type: string
          description: Unique ID identifying the post.
        user:
          $ref: '#/components/schemas/User'
          description: The author of the post.
        content:
          type: string
          description: The content of the post.
        timestamp:
          type: integer
          description: Unix timestamp of the post creation.
        likes:
          type: integer
          description: The number of likes added to the comment.
        commentCount:
          type: integer
          description: The number of comments added to the post.
    Post:
      type: object
      allOf:
        - $ref: '#/components/schemas/PostMeta'
      properties:
        comments: 
          type: array
          items:
            $ref: '#/components/schemas/Comment'
    NewComment:
      type: object
      required:
      - content
      properties:
        content:
          type: string
          description: The content of the comment
    Comment:
      type: object
      required:
        - id
        - content
        - user
      properties:
        id:
          type: string
          description: Unique ID of the comment
        user:
          $ref: '#/components/schemas/User'
          description: The author of the comment.
        content:
          type: string
    Error:
      type: object
      required:
      - code
      - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid

security:
  - JWT: []  