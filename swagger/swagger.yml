openapi: 3.0.0
info:
  version: 1.0.0
  title: MSP - Blog e
  description: ''
servers:
- url: http://localhost:6969/
tags:
  - name: User
    description: Everything user related.
  - name: Blog Post
    description: Everything about blog-posts.
x-tagGroups:
  - name: App API
    tags:
      - User
      - Blog Post
paths:
  /users:
    post:
      tags:
        - User
      summary: Sign up
      description: Create and store a new user with the given data in the database. Also creates and returns a corresponding JWT used for authorization in subsequent requests. JWT
      security:
        - {}
      requestBody:
        description: User information
        required: true
        content:
          application/json:
            schema: 
              allOf:
                - $ref: '#/components/schemas/Authentication'
                - $ref: '#/components/schemas/User'
      responses:
        '200':
          description: 'User was successfully created. Returns a JWT access token that should be set in the Authorization header of subsequent API calls.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
        '409':
          description: 'A user with the same login already exists. Please provide a different user login.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - User
      summary: Search user
      description: Search for a user given a search string. Returns all users that contain the given search string in their username or display name. Might return an empty response if no user is found. If too many matches are found, the result might be limited by the server.
      parameters:
        - in: query
          name: search
          schema:
            type: string
          description: The search string used to find users.
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:  
                type: object
                required:
                  - users
                properties:
                  users:
                    type: 'array'
                    items:
                      $ref: '#/components/schemas/User'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/auth:
    post:
      tags:
        - User
      summary: Login 
      description: Authenticate a user by passing in login credentials. Returns a JWT that can be used in the Authorization Header to authenticate the user in subsequent API calls.
      security:
        - {}
      requestBody:
        description: Login information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Authentication'
      responses:
        '200':
          description: 'User was successfully authorized. Returns a JWT access token that should be set in the Authorization header of subsequent API calls.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{username}:
    get:
      tags:
        - User
      summary: Get user
      description: Get the User with the given username. Use magic id 'me' to get the user associated with the provided JWT token, i.e. the logged in user.
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserMeta'
        '404':
          description: 'No user with the given username was found.'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - User
      summary: Update user
      description: Update any user info. All fields are optional. Will only work on the logged in user.
      requestBody:
        description: User information that should be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: ok
        '404':
          description: 'No user with the given username was found.'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{username}/follow:
    post:
      tags:
        - User
      summary: Follow
      description: Follow the specified user.
      responses:
        '200':
          description: ok
        '404':
          description: 'No user with the given id was found.'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - User
      summary: Unfollow
      description: Unfollow the specified user.
      responses:
        '200':
          description: ok
        '404':
          description: 'No user with the given id was found.'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /posts/:
    post:
      tags:
        - Blog Post
      summary: New post
      description: Create a new post with the given details.
      requestBody:
        description: Post 
        required: true
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/NewPost'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - Blog Post
      summary: List posts
      description: Get a paginated list of posts. Use optional query parameters to further specify the returned list.
      parameters:
        - in: query
          name: usernames
          schema:
            type: array
          description: Specify usernames to only retrieve posts from these users. User magic 'me' as own username. If no usernames are specified, all posts are returned by the server. For of the usernames either as ?usernames=["username1", "username2"] or as ?usernames=username1&usernames=username2.
        - in: query
          name: isUserFeed
          schema:
            type: boolean
          description: If true, only posts from followed users are returned. Valid values are "true" and "1"
        - in: query
          name: pageSize
          schema:
            type: number
          description: The maximum number of results returned by the server. If no value is given, a default is used. The server may further constraint the page size.
        - in: query
          name: pageToken
          schema:
            type: string
          description: Specifies which page to return. If not set or pageToken = "" the first page is returned. Use the 'nextPageToken' returned by previous request to get subsequent pages.
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: object
                required:
                  - nextPageToken
                  - posts
                properties:
                  nextPageToken:
                    type: string
                    description: Opaque page token used to request subsequent pages. Empty string "" if no more data exists.
                  posts:
                    type: 'array'
                    items:
                      $ref: '#/components/schemas/PostMeta'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /generate/incontext:
    post:
      summary: Generate post from history
      description: Given n turns of conversation create the next post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContextPost'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
  /posts/{id}:
    get:
      tags:
        - post
      summary: Get post
      description: Get the post with the given id.
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /posts/{id}/watch:
    get:
      tags:
        - Blog Post
      summary: (WS) Watch post
      description: Start watching the specified post. Establishes a Websocket connection that is called whenever information associated with the post is updated.
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'  # TODO: We might want to change this and only send diff or events.
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /posts/{id}/likes:
    post:
      tags:
        - Blog Post
      summary: Like post
      description: Like the given post.
      responses:
        '200':
          description: ok
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Blog Post
      summary: Remove like on post
      description: Unlike the given post.
      responses:
        '200':
          description: ok
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /posts/{id}/comments:
    post:
      tags:
        - Blog Post
      summary: New comment
      description: Add a new comment to the given post.
      requestBody:
        description: Comment
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewComment'

      responses:
        '200':
          description: ok
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  securitySchemes:
    JWT:
      type: http
      scheme: bearer
      bearerFormat: JWT 
      description: 'Authorization: Bearer <token>'
  schemas:
    Authentication:
      type: object
      required:
      - username
      - password
      properties:
        username:
          type: string
          description: A unique login name.
        password:
          type: string
          description: The password of the user.
    AccessToken:
      type: object
      required:
      - accessToken
      - tokenType
      properties:
        accessToken:
          type: string
          description: The access token to be used in the Authorization Header of subsequent calls.
        tokenType:
          type: string
          description: Type of the token, typically 'Bearer'.
    User:
      type: object
      required:
      - username
      - iconId
      properties:
        username:
          type: string
          description: Unique username of the user
        iconId:
          type: string
          description: Identifies the locally stored icon assigned to the given user.
        displayName:
          type: string
          description: The name that is displayed publically inside the app.
        bio:
          type: string
          description: The bio or description of the user.
    UserMeta:
      type: object
      allOf:
        - $ref: '#/components/schemas/User'
      properties:
        followers:
          type: array
          items:
            $ref: '#/components/schemas/User'
    UserUpdate:
      type: object
      properties:
        iconId:
          type: string
          description: Identifies the locally stored icon assigned to the given user.
        displayName:
          type: string
          description: The name that is displayed publically inside the app.
        password:
          type: string
        bio:
          type: string
    NewPost:
      type: object
      required:
      - content
      properties:
        content:
          type: string
          description: The content of the post provided by the user
        shouldAutoComplete:
          type: boolean
          description: If true, the server uses the LM backend to autocomplete the post.
        autogenerateAnswers:
          type: boolean
          description: If true, the server will automatically generate comments on the post.
        mood:
          type: string
          description: The mood of the post. Valid values = ['happy','sad','angry','ironic']. If no value is provided, mood feature is not used.
        temperature:
          type: number
          description: The temperature, i.e. craziness of the post.
        historyLength:
          type: number
          description: The length of the history that is used when generating automatic replies.
    ContextPost:
      type: object
      required:
        - turns
      properties:
        turns:
          type: integer
          description: The content of the post provided by the user
        postId:
          type: string
          description: The Id of the post which past context is used.
        autogenerateAnswers:
          type: boolean
          description: If true, the server will automatically generate answers.
        temperature:
          type: number
          description: The randomness, i.e. craziness of the post.
    Post:
      type: object
      required:
      - id
      - content
      - timestamp
      - autocompleted
      properties:
        id:
          type: string
          description: Unique ID identifying the post.
        content:
          type: string
          description: The content of the post.
        timestamp:
          type: string
          description: Timestamp of the post creation.
        autocompleted:
          type: boolean
          description: Whether or not the post was autocompleted.
    PostMeta:
      type: object
      allOf:
        - $ref: '#/components/schemas/Post'
      properties:
        user:
          $ref: '#/components/schemas/User'
          description: The author of the post.
        likes:
          type: array
          items:
            type: string
          description: The usernames of all accounts that liked the post.
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
          description: The number of comments added to the post.
    NewComment:
      type: object
      required:
      - content
      properties:
        content:
          type: string
          description: The content of the comment
    Comment:
      type: object
      required:
        - id
        - content
        - user
      properties:
        id:
          type: string
          description: Unique ID of the comment
        user:
          $ref: '#/components/schemas/User'
          description: The author of the comment.
        content:
          type: string
    Error:
      type: object
      required:
      - code
      - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid

security:
  - JWT: []  
